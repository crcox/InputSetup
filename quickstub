#!/usr/bin/env python
from __future__ import absolute_import, division, print_function
from io import open
import argparse
import os
import os.path
import sys
import pandas
import pkg_resources
import yaml
from hyperband.hyperband import pick_best_hyperparameters
from mako.template import Template
from mako import exceptions
resource_package = 'pycon'

resource_path_stub = os.path.join('templates','stub.mako')
stub_template_string = pkg_resources.resource_string(resource_package, resource_path_stub)
stub_template = Template(stub_template_string)

p = argparse.ArgumentParser()
# Required Positional Arguments
p.add_argument('method', help="soslasso, iterlasso, lasso, searchlight. ToDo: searchlightrsa, nrsa")
# Flags
p.add_argument('-v','--verbose',action='store_true',help="Print parameter details into the stub file as comments.")
p.add_argument('-H','--hyperband',action='store_true',help="Tweak some parameters to be compatible with a HYPERBAND setup.")
# Options
p.add_argument('-m','--metadata',type=str,help="Path to metadata file.")
p.add_argument('-d','--data',type=str,nargs='+',help='List of paths to include in the data list.')
p.add_argument('-r','--random_permutations',type=int,nargs='+',default=[0],help="If greater than zero, generate a template for doing r random permutations. If two arguments are provided, the second specifies how many batches the permutations shuold be split in to.")
p.add_argument('-R','--permutation_index',type=str,nargs=2,help="Permutation index.")
p.add_argument('-k','--kfolds',type=int,default=10,help='Set up k-fold cv for a particular k.')
p.add_argument('-t','--tuning-error',type=str,nargs='+',default=[],help="Provide path to one or more csv files containing error for multiple hyperparameter configurations. The stub will incorporate the 'best' parameters.")
p.add_argument('-s','--tuning-stub',type=str,default='',help="Provide path to the stub.yaml file that was used to specify a round of tuning. This can be used in conjunction with --tuning-error to generate a final/stub.yaml.")
p.add_argument('-c','--config-stub',type=str,default='',help="Provide path to a yaml file that will define how to generate the tuning stub.")
p.add_argument('-a','--argmax',action='store_true',help='When tuning error is provided, this toggles whether to choose the hyperparameter configuration with the maximum objective value [the default is to minimize].')
p.add_argument('-b','--by',type=str,nargs='+',default=['subject','finalholdout'],help="When tuning error is provided, this specifies which fields to group by when picking the 'best' hyperparameter configuration [the defaults are 'subject','finalholdout'].")
p.add_argument('-p','--hyperparameters',type=str,nargs='+',default=['lambda'],help="When tuning error is provided, this specifies which fields to treat as hyperparameters when picking the 'best' hyperparameter configuration [the default is 'lambda'].")
p.add_argument('-x','--objective',type=str,default='err1',help="When tuning error is provided, this specifies which field to treat as the objective value when picking the 'best' hyperparameter configuration [the default is 'err1'].")
p.add_argument('-o','--output',type=str,default='',help="A file to write output to. Output will be YAML formatted. [default is to print to stdout]")

args = p.parse_args()
X = {}
final = False
tuningstub = False
if args.tuning_error:
    final = True
    if args.tuning_stub:
        with open(args.tuning_stub,'rb') as f:
            tuningstub = yaml.load(f)

        if args.metadata:
            X['metadata'] = args.metadata
        else:
            X['metadata'] = tuningstub['metadata']

        if args.permutation_index:
            X['PermutationIndex'] = args.permutation_index[0]
            X['perm_varname'] = args.permutation_index[1]

        X['regularization'] = tuningstub['regularization']
        X['bias'] = tuningstub['bias']
        X['normalize_target'] = tuningstub['normalize_target']
        X['normalize_data'] = tuningstub['normalize_data']
        try:
            X['normalize_wrt'] = tuningstub['normalize_wrt']
        except KeyError:
            X['normalize_wrt'] = tuningstub['normalizewrt']
        X['data_var'] = tuningstub['data_var']
        X['metadata_var'] = tuningstub['metadata_var']
        X['filters'] = tuningstub['filters']
        X['cvscheme'] = tuningstub['cvscheme']
        X['target_label'] = tuningstub['target_label']
        X['target_type'] = tuningstub['target_type']
        if args.method in ['soslasso','lasso']:
            X['sim_source'] = ''
            X['sim_metric'] = ''
            X['tau'] = []
        else:
            X['sim_source'] = tuningstub['sim_source']
            X['sim_metric'] = tuningstub['sim_metric']
            X['tau'] = tuningstub['tau']
        X['subject_id_fmt'] = tuningstub['subject_id_fmt']
        X['executable'] = tuningstub['executable']
        X['wrapper'] = tuningstub['wrapper']

        if not args.data:
            args.data = tuningstub['data']

    df = pandas.concat([pandas.read_csv(f) for f in args.tuning_error])

    if args.method in ['soslasso','lasso']:
        df['diff'] = (df['h1']/df['nt1']) - (df['f1']/df['nd1'])

    z = pick_best_hyperparameters(df, args.by, args.hyperparameters, args.objective, args.argmax)
    # n = len(args.by + args.hyperparameters)
    # z = y.assign(hyper_min=[x[len(args.by):n] for x in z[args.objective]).drop(args.objective, 1)
    for i,x in enumerate(args.by):
        if len(args.by) > 1:
            levels = z.index.levels[i]
            if x == 'subject' and ('WindowStart' in args.by) and 'WindowSize' in args.by and 'BoxCar' in args.by and args.data:
                st = args.by.index('WindowStart')
                si = args.by.index('WindowSize')
                bc = args.by.index('BoxCar')
                sn = args.by.index('subject')
                for j in range(z.shape[0]):
                    pattern = "BoxCar/{BoxCar:03d}/WindowStart/{WindowStart:04d}/WindowSize/{WindowSize:04d}/s{filename:02d}_raw.mat".format(
                        BoxCar=z.index.levels[bc][z.index.labels[bc][j]],
                        WindowStart=z.index.levels[st][z.index.labels[st][j]],
                        WindowSize=z.index.levels[si][z.index.labels[si][j]],
                        filename=z.index.levels[sn][z.index.labels[sn][j]]
                    )
                    datamatch = [d for d in args.data if pattern in d]
                    if len(datamatch) > 1:
                        raise ValueError('Programming error? Pattern matched within multiple data strings.')
                    else:
                        try:
                            X[x].append(datamatch[0])
                            X['metadata'].append(os.path.split(datamatch[0])[0]+'/metadata_raw.mat')

                        except KeyError:
                            X[x] = []
                            X['metadata'] = []
                            X[x].append(datamatch[0])
                            X['metadata'].append(os.path.split(datamatch[0])[0]+'/metadata_raw.mat')

            elif x == 'subject' and args.data:
                X[x] = [args.data[j] for j in z.index.labels[i]]
            elif x == 'subject' and tuningstub:
                if isinstance(tuningstub['data'], list):
                    X[x] = [tuningstub['data'][j] for j in z.index.labels[i]]
                else:
                    X[x] = [tuningstub['data'] for j in z.index.labels[i]]
            else:
                X[x] = [levels[j] for j in z.index.labels[i]]
        else:
            if x == 'subject' and args.data:
                X[x] = [args.data[j] for j in z.index]
            elif x == 'subject' and tuningstub:
                X[x] = [tuningstub['data'][j] for j in z.index]
            else:
                X[x] = list(z.index)

    for i,x in enumerate(args.hyperparameters):
        X[x] = z[x].values.tolist()

if args.config_stub:
    with open(args.config_stub,'rb') as f:
        X = yaml.load(f)

print(args)
try:
    stub_text = stub_template.render(HOME=os.getenv('HOME'), method=args.method,
            data=args.data, metadata=args.metadata, r=args.random_permutations,
            k=args.kfolds, hyperband=args.hyperband, verbose=args.verbose, override=X, final=final)
except:
    with open('mako_error.html', 'wb') as f:
        f.write(exceptions.html_error_template().render())
    raise

if args.output:
    with open(args.output, 'w', newline='\n') as h:
        h.write(stub_text)
else:
    sys.stdout.write(stub_text)
