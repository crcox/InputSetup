#!/usr/bin/env python
import argparse
import os
import sys
import pandas
import pkg_resources
import yaml
from hyperband import pick_best_hyperparameters
from mako.template import Template
resource_package = 'pycon'

resource_path_stub = os.path.join('templates','stub.mako')
stub_template_string = pkg_resources.resource_string(resource_package, resource_path_stub)
stub_template = Template(stub_template_string)

p = argparse.ArgumentParser()
# Required Positional Arguments
p.add_argument('method', help="soslasso, iterlasso, lasso, searchlight. ToDo: searchlightrsa, nrsa")
# Flags
p.add_argument('-v','--verbose',action='store_true',help="Print parameter details into the stub file as comments.")
p.add_argument('-H','--hyperband',action='store_true',help="Tweak some parameters to be compatible with a HYPERBAND setup.")
# Options
p.add_argument('-m','--metadata',type=str,default='',help="Path to metadata file.")
p.add_argument('-d','--data',type=str,nargs='+',default=['/path/to/data/s101.mat','/path/to/data/s102.mat'],help='List of paths to include in the data list.')
p.add_argument('-r','--random_permutations',type=int,default=0,help="If greater than zero, generate a template for doing r random permutations.")
p.add_argument('-k','--kfolds',type=int,default=10,help='Set up k-fold cv for a particular k.')
p.add_argument('-t','--tuning-error',type=str,nargs='+',default=[],help="Provide path to one or more csv files containing error for multiple hyperparameter configurations. The stub will incorporate the 'best' parameters.")
p.add_argument('-a','--argmax',action='store_true',help='When tuning error is provided, this toggles whether to choose the hyperparameter configuration with the maximum objective value [the default is to minimize].')
p.add_argument('-b','--by',type=str,nargs='+',default=['subject','finalholdout'],help="When tuning error is provided, this specifies which fields to group by when picking the 'best' hyperparameter configuration [the defaults are 'subject','finalholdout'].")
p.add_argument('-p','--hyperparameters',type=str,nargs='+',default=['lambda'],help="When tuning error is provided, this specifies which fields to treat as hyperparameters when picking the 'best' hyperparameter configuration [the default is 'lambda'].")
p.add_argument('-x','--objective',type=str,default='err1',help="When tuning error is provided, this specifies which field to treat as the objective value when picking the 'best' hyperparameter configuration [the default is 'err1'].")
p.add_argument('-o','--output',type=str,default='',help="A file to write output to. Output will be YAML formatted. [default is to print to stdout]")

args = p.parse_args()

X = {}
final = False
if args.tuning_error:
    final = True
    if '/path/to/data/s101.mat' in args.data:
        args.data = []
    df = pandas.concat([pandas.read_csv(f) for f in args.tuning_error])
    z = pick_best_hyperparameters(df, args.by, args.hyperparameters, args.objective)
    # n = len(args.by + args.hyperparameters)
    # z = y.assign(hyper_min=[x[len(args.by):n] for x in z[args.objective]).drop(args.objective, 1)
    for i,x in enumerate(args.by):
        levels = z.index.levels[i]
        if x == 'subject' and args.data:
            X[x] = [args.data[j] for j in z.index.labels[i]]
        else:
            X[x] = [levels[j] for j in z.index.labels[i]]

    for i,x in enumerate(args.hyperparameters):
        X[x] = z[x].values

stub_text = stub_template.render(HOME=os.getenv('HOME'), method=args.method,
        data=args.data, metadata=args.metadata, r=args.random_permutations,
        k=args.kfolds, hyperband=args.hyperband, verbose=args.verbose, override=X, final=final)
if args.output:
    with open(args.output, 'w') as h:
        h.write(stub_text)
else:
    sys.stdout.write(stub_text)
